<?xml version="1.0" encoding="UTF-8"?>

<!-- process definition -->
<!-- crpt: gets cryptocurrency data -->
<!-- trnsfrm: transforms, formats, and sanitizes JSON data coming back from cryptocurrency endpoint -->
<process name="Cryptocurrency"
    targetNameSpace="http://bpeldomain.com/bpel/cryptocurrency"
    xmlns="http://schemas.xmlSoap.org/ws/2003/03/business-process/"
    xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process!"
    xmlns:crpt="http://servicedomain.com/bpel/cryptocurrency/"
    xmlns:trnsfrm="http://servicedomain.com/bpel/transformer/">

    <!-- partner links -->
    <partnerLinks>
        <!-- client partner link -->
        <partnerLink name="cryptoCurrencyClient"
            partnerLinkType="crc:cryptoCurrencyClientLT"
            myRole="cryptoCurrencyService"/>
        <!-- returns price/tabular data of cryptocurrency, historical data, averages, etc. -->
        <partnerLink name="cryptoCurrencyPrice"
            partnerLinkType="crpr:cryptoCurrencyPriceLT"
            partnerRole="cryptoCurrencyPrice"/>
        <!-- returns metadata about the specific cryptocurrency like description, images, assets, etc. -->
        <partnerLink name="cryptocurrencyMetadata"
            partnerLinkType = "mtdt:cryptocurrencyMetadataLT"
            myRole="cryptocurrencyAssets"
            partnerRole="cryptocurrencyMetadata"/>
    </partnerLinks>

    <!-- variables for operating bpel process -->
    <variables>
        <!-- client entry point -->
        <variable name="CryptocurrencyRequest" 
            messageType="cpt:CryptocurrencyRequestMessage"/>
        <!-- input for crypto price web service -->
        <variable name="CryptocurrencyPriceRequest" 
            messageType="crpr:CryptocurrencyPriceRequestMessage"/>
        <!-- output for crypto price web service -->
        <variable name="CryptocurrencyPriceResponse" 
            messageType="crpr:CryptocurrencyPriceResponseMessage"/>
        <!-- input for metadata of cryptocurrency -->
        <variable name="CryptocurrencyMetadataRequest" 
            messageType="mtdt:CryptocurrencyMetadataMessage"/>
        <!-- output for metadata of cryptocurrency -->
        <variable name="CryptocurrencyMetadataResponse" 
            messageType="mtdt:CryptocurrencyMetadataMessage"/>
        <!-- all of our responses are added to this variable -->
        <variable name="CryptocurrencyData" 
            messageType="crpr:CryptocurrencyAggregatedData"/>
    </variables>

    <!-- defining the sequence for our services to operate -->
    <sequence>
        <!-- client entry request -->
        <receive partnerLink="Client"
            portType="cpt:CryptocurrencyPricePT" 
            operation="CryptocurrencyDataRetrieve" 
            variable="CryptocurrencyRequest" 
            createlnstance="yes" />
        
        <!-- assign the variable from the client to the  -->
        <assign>
            <copy>
                <from variable="CryptocurrencyRequest" part="ticker"/>
                <to variable="CryptocurrencyPriceRequest" part="ticker"/>
            </copy>
        </assign>

        <!-- synchronously call crypto price request endpoint -->
        <invoke partnerLink="cryptoCurrencyPrice" 
            portType="crpr:CryptoCurrencyPT" 
            operation="cryptoCurrencyPrice"
            inputvariable="CryptocurrencyPriceRequest" 
            outputvariable="CryptocurrencyPriceResponse"/>
        
        <!-- Assign input to right variables, we're sending the ticker and the pricing object -->
        <!-- ticker is needed to get metadata -->
        <assign>
            <copy>
                <from variable="CryptocurrencyRequest" part="ticker"/>
                <to variable="CryptocurrencyData" part="ticker"/>
            </copy>
            <copy>
                <from variable="CryptocurrencyPriceResponse" part="pricing"/>
                <to variable="CryptocurrencyData" part="cryptocurrencyPricing"/>
            </copy>
        </assign>

        <!-- asynchronously call our metadata service -->
        <flow>
            <sequence>
                <!-- Async invoke of the metadata service -->
                <invoke partnerLink="cryptocurrencyMetadata" 
                    portType="mtdt:CryptocurrencyMetadataPT" 
                    operation="CryptocurrencyMetadata"
                    inputvariable= "CryptocurrencyData" />
                <receive partnerLink="cryptocurrencyMetadata" 
                    portType="mtdt:CryptocurrenctMetadataPT" 
                    operation="CryptocurrencyMetadataCallback" 
                    variable="CryptocurrencyMetadataResponse" />
            </sequence>
        </flow>

        <switch>
            <!-- if the metadata exists, attach it to our price response. -->
            <!-- otherwise, just send the pricing data without metadata. -->
            <case condition="bpws:getVariableData(CryptocurrencyMetadataResponse,
cryptocurrencyMetadata , ‘/cryptocurrencyMetadata/mtdt:currentPricing’)">
                <!-- add both the crypto and metadata response to our final response object -->
                <assign>
                    <copy>
                        <from variable="CryptocurrencyMetadataResponse" />
                        <to variable="CryptocurrencyData" />
                    </copy>
                    <copy>
                        <from variable="CryptocurrencyPriceResponse" />
                        <to variable="CryptocurrencyData" />
                    </copy>
                </assign>
                <otherwise>
                    <!-- otherwise, just attach the pricing to our final response. -->
                    <assign>
                        <copy>
                            <from variable="CryptocurrencyPriceResponse" />
                            <to variable="CryptocurrencyData" />
                        </copy>
                    </assign>
                </otherwise>
            </case>
        </switch>
        <!-- finally, send a response back with our final response object -->
        <reply partnerLink="Client" 
            portType="cpt:CryptocurrencyPricePT" 
            operation="CryptocurrencyDataRetrieve"
            variable="CryptocurrencyData"/>
    </sequence>
</process>